/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "User_types.h"

namespace com { namespace test {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void getUserById(User& _return, const int32_t id) = 0;
  virtual void getUserByName(User& _return, const std::string& name) = 0;
  virtual void getList(std::vector<User> & _return) = 0;
  virtual void addUser(const User& user) = 0;
  virtual void updateUser(const User& user) = 0;
  virtual void delUser(const std::string& name) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void getUserById(User& /* _return */, const int32_t /* id */) {
    return;
  }
  void getUserByName(User& /* _return */, const std::string& /* name */) {
    return;
  }
  void getList(std::vector<User> & /* _return */) {
    return;
  }
  void addUser(const User& /* user */) {
    return;
  }
  void updateUser(const User& /* user */) {
    return;
  }
  void delUser(const std::string& /* name */) {
    return;
  }
};

typedef struct _UserService_getUserById_args__isset {
  _UserService_getUserById_args__isset() : id(false) {}
  bool id :1;
} _UserService_getUserById_args__isset;

class UserService_getUserById_args {
 public:

  UserService_getUserById_args(const UserService_getUserById_args&);
  UserService_getUserById_args& operator=(const UserService_getUserById_args&);
  UserService_getUserById_args() : id(0) {
  }

  virtual ~UserService_getUserById_args() throw();
  int32_t id;

  _UserService_getUserById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const UserService_getUserById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const UserService_getUserById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_getUserById_pargs {
 public:


  virtual ~UserService_getUserById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserById_result__isset {
  _UserService_getUserById_result__isset() : success(false) {}
  bool success :1;
} _UserService_getUserById_result__isset;

class UserService_getUserById_result {
 public:

  UserService_getUserById_result(const UserService_getUserById_result&);
  UserService_getUserById_result& operator=(const UserService_getUserById_result&);
  UserService_getUserById_result() {
  }

  virtual ~UserService_getUserById_result() throw();
  User success;

  _UserService_getUserById_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_getUserById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_getUserById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserById_presult__isset {
  _UserService_getUserById_presult__isset() : success(false) {}
  bool success :1;
} _UserService_getUserById_presult__isset;

class UserService_getUserById_presult {
 public:


  virtual ~UserService_getUserById_presult() throw();
  User* success;

  _UserService_getUserById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_getUserByName_args__isset {
  _UserService_getUserByName_args__isset() : name(false) {}
  bool name :1;
} _UserService_getUserByName_args__isset;

class UserService_getUserByName_args {
 public:

  UserService_getUserByName_args(const UserService_getUserByName_args&);
  UserService_getUserByName_args& operator=(const UserService_getUserByName_args&);
  UserService_getUserByName_args() : name() {
  }

  virtual ~UserService_getUserByName_args() throw();
  std::string name;

  _UserService_getUserByName_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const UserService_getUserByName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const UserService_getUserByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_getUserByName_pargs {
 public:


  virtual ~UserService_getUserByName_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserByName_result__isset {
  _UserService_getUserByName_result__isset() : success(false) {}
  bool success :1;
} _UserService_getUserByName_result__isset;

class UserService_getUserByName_result {
 public:

  UserService_getUserByName_result(const UserService_getUserByName_result&);
  UserService_getUserByName_result& operator=(const UserService_getUserByName_result&);
  UserService_getUserByName_result() {
  }

  virtual ~UserService_getUserByName_result() throw();
  User success;

  _UserService_getUserByName_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_getUserByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_getUserByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserByName_presult__isset {
  _UserService_getUserByName_presult__isset() : success(false) {}
  bool success :1;
} _UserService_getUserByName_presult__isset;

class UserService_getUserByName_presult {
 public:


  virtual ~UserService_getUserByName_presult() throw();
  User* success;

  _UserService_getUserByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UserService_getList_args {
 public:

  UserService_getList_args(const UserService_getList_args&);
  UserService_getList_args& operator=(const UserService_getList_args&);
  UserService_getList_args() {
  }

  virtual ~UserService_getList_args() throw();

  bool operator == (const UserService_getList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_getList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_getList_pargs {
 public:


  virtual ~UserService_getList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getList_result__isset {
  _UserService_getList_result__isset() : success(false) {}
  bool success :1;
} _UserService_getList_result__isset;

class UserService_getList_result {
 public:

  UserService_getList_result(const UserService_getList_result&);
  UserService_getList_result& operator=(const UserService_getList_result&);
  UserService_getList_result() {
  }

  virtual ~UserService_getList_result() throw();
  std::vector<User>  success;

  _UserService_getList_result__isset __isset;

  void __set_success(const std::vector<User> & val);

  bool operator == (const UserService_getList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_getList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getList_presult__isset {
  _UserService_getList_presult__isset() : success(false) {}
  bool success :1;
} _UserService_getList_presult__isset;

class UserService_getList_presult {
 public:


  virtual ~UserService_getList_presult() throw();
  std::vector<User> * success;

  _UserService_getList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_addUser_args__isset {
  _UserService_addUser_args__isset() : user(false) {}
  bool user :1;
} _UserService_addUser_args__isset;

class UserService_addUser_args {
 public:

  UserService_addUser_args(const UserService_addUser_args&);
  UserService_addUser_args& operator=(const UserService_addUser_args&);
  UserService_addUser_args() {
  }

  virtual ~UserService_addUser_args() throw();
  User user;

  _UserService_addUser_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const UserService_addUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserService_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_addUser_pargs {
 public:


  virtual ~UserService_addUser_pargs() throw();
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_addUser_result {
 public:

  UserService_addUser_result(const UserService_addUser_result&);
  UserService_addUser_result& operator=(const UserService_addUser_result&);
  UserService_addUser_result() {
  }

  virtual ~UserService_addUser_result() throw();

  bool operator == (const UserService_addUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_addUser_presult {
 public:


  virtual ~UserService_addUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_updateUser_args__isset {
  _UserService_updateUser_args__isset() : user(false) {}
  bool user :1;
} _UserService_updateUser_args__isset;

class UserService_updateUser_args {
 public:

  UserService_updateUser_args(const UserService_updateUser_args&);
  UserService_updateUser_args& operator=(const UserService_updateUser_args&);
  UserService_updateUser_args() {
  }

  virtual ~UserService_updateUser_args() throw();
  User user;

  _UserService_updateUser_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const UserService_updateUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserService_updateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_updateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_updateUser_pargs {
 public:


  virtual ~UserService_updateUser_pargs() throw();
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_updateUser_result {
 public:

  UserService_updateUser_result(const UserService_updateUser_result&);
  UserService_updateUser_result& operator=(const UserService_updateUser_result&);
  UserService_updateUser_result() {
  }

  virtual ~UserService_updateUser_result() throw();

  bool operator == (const UserService_updateUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_updateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_updateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_updateUser_presult {
 public:


  virtual ~UserService_updateUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_delUser_args__isset {
  _UserService_delUser_args__isset() : name(false) {}
  bool name :1;
} _UserService_delUser_args__isset;

class UserService_delUser_args {
 public:

  UserService_delUser_args(const UserService_delUser_args&);
  UserService_delUser_args& operator=(const UserService_delUser_args&);
  UserService_delUser_args() : name() {
  }

  virtual ~UserService_delUser_args() throw();
  std::string name;

  _UserService_delUser_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const UserService_delUser_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const UserService_delUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_delUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_delUser_pargs {
 public:


  virtual ~UserService_delUser_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_delUser_result {
 public:

  UserService_delUser_result(const UserService_delUser_result&);
  UserService_delUser_result& operator=(const UserService_delUser_result&);
  UserService_delUser_result() {
  }

  virtual ~UserService_delUser_result() throw();

  bool operator == (const UserService_delUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_delUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_delUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_delUser_presult {
 public:


  virtual ~UserService_delUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserById(User& _return, const int32_t id);
  void send_getUserById(const int32_t id);
  void recv_getUserById(User& _return);
  void getUserByName(User& _return, const std::string& name);
  void send_getUserByName(const std::string& name);
  void recv_getUserByName(User& _return);
  void getList(std::vector<User> & _return);
  void send_getList();
  void recv_getList(std::vector<User> & _return);
  void addUser(const User& user);
  void send_addUser(const User& user);
  void recv_addUser();
  void updateUser(const User& user);
  void send_updateUser(const User& user);
  void recv_updateUser();
  void delUser(const std::string& name);
  void send_delUser(const std::string& name);
  void recv_delUser();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUserById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(::apache::thrift::stdcxx::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["getUserById"] = &UserServiceProcessor::process_getUserById;
    processMap_["getUserByName"] = &UserServiceProcessor::process_getUserByName;
    processMap_["getList"] = &UserServiceProcessor::process_getList;
    processMap_["addUser"] = &UserServiceProcessor::process_addUser;
    processMap_["updateUser"] = &UserServiceProcessor::process_updateUser;
    processMap_["delUser"] = &UserServiceProcessor::process_delUser;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUserById(User& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserById(_return, id);
    }
    ifaces_[i]->getUserById(_return, id);
    return;
  }

  void getUserByName(User& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserByName(_return, name);
    }
    ifaces_[i]->getUserByName(_return, name);
    return;
  }

  void getList(std::vector<User> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getList(_return);
    }
    ifaces_[i]->getList(_return);
    return;
  }

  void addUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(user);
    }
    ifaces_[i]->addUser(user);
  }

  void updateUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUser(user);
    }
    ifaces_[i]->updateUser(user);
  }

  void delUser(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delUser(name);
    }
    ifaces_[i]->delUser(name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserServiceConcurrentClient : virtual public UserServiceIf {
 public:
  UserServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserById(User& _return, const int32_t id);
  int32_t send_getUserById(const int32_t id);
  void recv_getUserById(User& _return, const int32_t seqid);
  void getUserByName(User& _return, const std::string& name);
  int32_t send_getUserByName(const std::string& name);
  void recv_getUserByName(User& _return, const int32_t seqid);
  void getList(std::vector<User> & _return);
  int32_t send_getList();
  void recv_getList(std::vector<User> & _return, const int32_t seqid);
  void addUser(const User& user);
  int32_t send_addUser(const User& user);
  void recv_addUser(const int32_t seqid);
  void updateUser(const User& user);
  int32_t send_updateUser(const User& user);
  void recv_updateUser(const int32_t seqid);
  void delUser(const std::string& name);
  int32_t send_delUser(const std::string& name);
  void recv_delUser(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
