/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LoginService_H
#define LoginService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "User_types.h"

namespace com { namespace test {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LoginServiceIf {
 public:
  virtual ~LoginServiceIf() {}
  virtual bool isLogin(const std::string& name) = 0;
  virtual void test1() = 0;
};

class LoginServiceIfFactory {
 public:
  typedef LoginServiceIf Handler;

  virtual ~LoginServiceIfFactory() {}

  virtual LoginServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LoginServiceIf* /* handler */) = 0;
};

class LoginServiceIfSingletonFactory : virtual public LoginServiceIfFactory {
 public:
  LoginServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<LoginServiceIf>& iface) : iface_(iface) {}
  virtual ~LoginServiceIfSingletonFactory() {}

  virtual LoginServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LoginServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<LoginServiceIf> iface_;
};

class LoginServiceNull : virtual public LoginServiceIf {
 public:
  virtual ~LoginServiceNull() {}
  bool isLogin(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void test1() {
    return;
  }
};

typedef struct _LoginService_isLogin_args__isset {
  _LoginService_isLogin_args__isset() : name(false) {}
  bool name :1;
} _LoginService_isLogin_args__isset;

class LoginService_isLogin_args {
 public:

  LoginService_isLogin_args(const LoginService_isLogin_args&);
  LoginService_isLogin_args& operator=(const LoginService_isLogin_args&);
  LoginService_isLogin_args() : name() {
  }

  virtual ~LoginService_isLogin_args() throw();
  std::string name;

  _LoginService_isLogin_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const LoginService_isLogin_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const LoginService_isLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginService_isLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginService_isLogin_pargs {
 public:


  virtual ~LoginService_isLogin_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginService_isLogin_result__isset {
  _LoginService_isLogin_result__isset() : success(false) {}
  bool success :1;
} _LoginService_isLogin_result__isset;

class LoginService_isLogin_result {
 public:

  LoginService_isLogin_result(const LoginService_isLogin_result&);
  LoginService_isLogin_result& operator=(const LoginService_isLogin_result&);
  LoginService_isLogin_result() : success(0) {
  }

  virtual ~LoginService_isLogin_result() throw();
  bool success;

  _LoginService_isLogin_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const LoginService_isLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LoginService_isLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginService_isLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginService_isLogin_presult__isset {
  _LoginService_isLogin_presult__isset() : success(false) {}
  bool success :1;
} _LoginService_isLogin_presult__isset;

class LoginService_isLogin_presult {
 public:


  virtual ~LoginService_isLogin_presult() throw();
  bool* success;

  _LoginService_isLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LoginService_test1_args {
 public:

  LoginService_test1_args(const LoginService_test1_args&);
  LoginService_test1_args& operator=(const LoginService_test1_args&);
  LoginService_test1_args() {
  }

  virtual ~LoginService_test1_args() throw();

  bool operator == (const LoginService_test1_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LoginService_test1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginService_test1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginService_test1_pargs {
 public:


  virtual ~LoginService_test1_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginService_test1_result {
 public:

  LoginService_test1_result(const LoginService_test1_result&);
  LoginService_test1_result& operator=(const LoginService_test1_result&);
  LoginService_test1_result() {
  }

  virtual ~LoginService_test1_result() throw();

  bool operator == (const LoginService_test1_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LoginService_test1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginService_test1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginService_test1_presult {
 public:


  virtual ~LoginService_test1_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LoginServiceClient : virtual public LoginServiceIf {
 public:
  LoginServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoginServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool isLogin(const std::string& name);
  void send_isLogin(const std::string& name);
  bool recv_isLogin();
  void test1();
  void send_test1();
  void recv_test1();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LoginServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<LoginServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LoginServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_isLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LoginServiceProcessor(::apache::thrift::stdcxx::shared_ptr<LoginServiceIf> iface) :
    iface_(iface) {
    processMap_["isLogin"] = &LoginServiceProcessor::process_isLogin;
    processMap_["test1"] = &LoginServiceProcessor::process_test1;
  }

  virtual ~LoginServiceProcessor() {}
};

class LoginServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LoginServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< LoginServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< LoginServiceIfFactory > handlerFactory_;
};

class LoginServiceMultiface : virtual public LoginServiceIf {
 public:
  LoginServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<LoginServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LoginServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<LoginServiceIf> > ifaces_;
  LoginServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<LoginServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool isLogin(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isLogin(name);
    }
    return ifaces_[i]->isLogin(name);
  }

  void test1() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test1();
    }
    ifaces_[i]->test1();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LoginServiceConcurrentClient : virtual public LoginServiceIf {
 public:
  LoginServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoginServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool isLogin(const std::string& name);
  int32_t send_isLogin(const std::string& name);
  bool recv_isLogin(const int32_t seqid);
  void test1();
  int32_t send_test1();
  void recv_test1(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
